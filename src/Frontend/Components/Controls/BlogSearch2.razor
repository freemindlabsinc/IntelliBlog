@inject Frontend.BlogsMainQuery MainQuery

<div Style="border: 0px solid; color: red">
    <EditForm FormName="UserSearch" Model="this" Style="border: 2px solid">
        <!-- Search bar -->
        <FluentTextField Appearance="FluentInputAppearance.Outline"
                         Placeholder="Enter your search here..."
                         AriaLabel="No label"
                         Style="width: 60%">
            <FluentIcon Value="@(new Icons.Regular.Size16.Search())" Color="@Color.Neutral" Slot="start" />                                    
        </FluentTextField>

        <!-- Mic button -->
        <FluentButton>
            <FluentIcon Value="@(new Icons.Regular.Size16.Mic())" Color="@Color.Neutral" />
        </FluentButton>

        <!-- Order by -->


        <!-- Sort by -->

        <!-- Search button -->
        <FluentButton Type="ButtonType.Submit" OnClick="FetchData">Search</FluentButton>
    </EditForm>   
</div>

@code {
    [SupplyParameterFromForm]
    public int First { get; set; } = 15;

    [SupplyParameterFromForm]
    public string? After { get; set; }

    [SupplyParameterFromForm]
    public string? SearchText { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestBlogPosts { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestPosts { get; set; }

    [Parameter]
    public Func<IBlogsMainResult, Task>? ResultsChanged { get; set; }

    
    bool fetchedOnce = false;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!fetchedOnce)
        {
            await FetchData();
            fetchedOnce = true;
        }        
    }

    public async Task FetchData()
    {
        IOperationResult<IBlogsMainResult>? response = await MainQuery.ExecuteAsync(
            first: this.First,
            after: this.After,
            where: this.Where,
            order: this.Order,
            maxLatestBlogPosts: this.MaxLatestBlogPosts,
            maxLatestPosts: this.MaxLatestPosts,
            cancellationToken: default
        );

        response.EnsureNoErrors();

        if (ResultsChanged != null)
        {
            await ResultsChanged!.Invoke(response!.Data!);
        }
    }
    
    // ----------------------------

    BlogSortInput[] Order => new[] { new BlogSortInput()
    {
        Id = SortEnumType.Desc
    }};

    BlogFilterInput? Where => GetFilterInput();

    BlogFilterInput? GetFilterInput()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
            return null;

        var filterInput = new BlogFilterInput();
        filterInput.Or = new BlogFilterInput[]
        {
            new BlogFilterInput() { Name = new StringOperationFilterInput() { Contains = SearchText } },
            new BlogFilterInput() { Description = new StringOperationFilterInput() { Contains = SearchText } },
        };

        return filterInput;
    }

    
}
