@page "/blogs"
@using Frontend.Components.Controls
@rendermode InteractiveServer
@inject Frontend.BlogsMainQuery MainQuery

<PageTitle>My GQL Blogs</PageTitle>

<BlogSearch @ref="SearchBar" ResultsChanged="OnNewResults" />


Count: [(@Response?.Blogs?.Nodes?.Count ?? -1)]
Order: [Order]
Filter: [Where]


@if (this.Response == null)
{
    <p><em>Loading Blogs!!</em></p>
}
else
{
    if (this.Blogs_ != null)
    {
        @foreach (var blog in this.Blogs_)
        {
            <FluentCard Height="Auto">
                <FluentLayout>
                    <FluentHeader>
                        <!-- Some Header Text -->
                        <FluentBadge Appearance="Appearance.Neutral">@blog.Name</FluentBadge>
                    
                        <FluentBadge Appearance="Appearance.Lightweight">@(blog.Description ?? "this is a description")</FluentBadge>
                        <FluentSpacer />

                        <!--  Aligned to the end -->
                        <FluentBadge Appearance="Appearance.Lightweight" Style="color: gray">@blog.Id</FluentBadge>

                    </FluentHeader>
                
                <!--FluentStack Orientation="Orientation.Horizontal" Width="100%" -->
                    <FluentNavMenu Width="250">
                       <img src="@blog.Image" alt="Broken Link" height="160px" width="240px" />                       
                    </FluentNavMenu>

                        
                    <FluentFooter Style="@("height: 40px; color: white; text-align: center")">
                        <FluentLabel>
                            This blog has [X] article(s) and some other data: [Y], [Z]
                        </FluentLabel>                        
                    </FluentFooter>
                
            </FluentLayout>
        </FluentCard>
    }
    } 
}



@code {
    public IBlogsMainResult? Response { get; set; }

    public BlogSearch SearchBar { get; set; } = default!;    

    public IEnumerable<IBlogsMain_Blogs_Nodes>? Blogs_ 
        => Response?.Blogs?.Nodes ?? Enumerable.Empty<IBlogsMain_Blogs_Nodes>();

    public IEnumerable<IBlogsMain_LatestOverallPosts_Nodes>? Posts 
        => Response?.LatestOverallPosts?.Nodes ?? Enumerable.Empty<IBlogsMain_LatestOverallPosts_Nodes>();

    public Task OnNewResults(IBlogsMainResult response)
    {
        Response = response;
        
        StateHasChanged();

        return Task.CompletedTask;
    }
}