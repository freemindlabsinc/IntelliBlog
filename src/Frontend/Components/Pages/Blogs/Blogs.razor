@page "/blogs"
@rendermode InteractiveServer

<PageTitle>Blogxxx</PageTitle>

    <FluentLayout>
    <!-- Header -->
    <FluentHeader Style="background-color: white">
        <BlogSearch SearchCompleted="OnSearchCompleted" />        
    </FluentHeader>
    @if (Model is not null)
    {
        <!-- Grid -->
            <FluentDataGrid Items="@BlobsAsQueriable" TGridItem="IBlogsModel_Blogs_Nodes">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.CreatedOn)" Format="yyyy-MM-dd" Sortable="false" />
            <PropertyColumn Property="@(p => p.CreatedBy)" Sortable="true" />
            <TemplateColumn Title="Bonus">
                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => EditBlog(context))">Edit</FluentButton>            
            </TemplateColumn>
        </FluentDataGrid>
    }
</FluentLayout>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public BlogsModelQuery MainQuery { get; set; } = default!;

    public IBlogsModelResult? Model { get; set; }

    public IQueryable<IBlogsModel_Blogs_Nodes> BlobsAsQueriable
        => Model?.Blogs?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsModel_Blogs_Nodes>().AsQueryable();

    public IQueryable<IBlogsModel_LatestOverallPosts_Nodes> LatestOverallPostsAsQueriable
        => Model?.LatestOverallPosts?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsModel_LatestOverallPosts_Nodes>().AsQueryable(); 

    public Task OnSearchCompleted(IBlogsModelResult response)
    {
        Model = response;
        
        StateHasChanged();

        return Task.CompletedTask;
    }

    public void EditBlog(IBlogsModel_Blogs_Nodes blog)
    {
        NavigationManager.NavigateTo($"/blogs/edit/{blog.Id}");
    }

}