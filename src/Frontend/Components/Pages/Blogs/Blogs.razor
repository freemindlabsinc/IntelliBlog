@page "/blogs"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject BlogsMainQuery MainQuery

<PageTitle>Blog</PageTitle>

<FluentLayout>
    <FluentHeader Style="background-color: white">
        <BlogSearch ResultsChanged2="OnNewResults" />        
    </FluentHeader>
    
    @* <FluentGrid Style="overflow: hidden; overflow-y: auto; width:100%">

        @foreach (var blog in Items!)
        {
            <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                <BlogCard Blog="blog" />
            </FluentGridItem>
        }
    </FluentGrid> *@

    <FluentDataGrid Items="@Items">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.CreatedOn)" Format="yyyy-MM-dd" Sortable="false" />
        <PropertyColumn Property="@(p => p.CreatedBy)" Sortable="true" />
        <TemplateColumn Title="Bonus">
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Edit(context))">Edit</FluentButton>            
        </TemplateColumn>
    </FluentDataGrid>


</FluentLayout>


@code {
    public IBlogsMainResult? Response { get; set; }

    public IQueryable<IBlogsMain_Blogs_Nodes> Items 
        => Response?.Blogs?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsMain_Blogs_Nodes>().AsQueryable();

    public IQueryable<IBlogsMain_LatestOverallPosts_Nodes> LatestOverallPosts 
        => Response?.LatestOverallPosts?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsMain_LatestOverallPosts_Nodes>().AsQueryable();

    GridSort<IBlogsMain_Blogs_Nodes> sortByName = GridSort<IBlogsMain_Blogs_Nodes>
       .ByAscending(blog => blog.Name);

    public void Edit(IBlogsMain_Blogs_Nodes blog)
    {
        NavigationManager.NavigateTo($"/blogs/edit/{blog.Id}");
    }

    public Task OnNewResults(IBlogsMainResult response)
    {
        Response = response;
        
        StateHasChanged();

        return Task.CompletedTask;
    }
}