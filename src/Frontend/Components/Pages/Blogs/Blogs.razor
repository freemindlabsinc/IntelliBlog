@page "/blogs"
@rendermode InteractiveServer
@inject Frontend.FetchBlogsQuery Query

<PageTitle>My Blogs</PageTitle>

@if (blogs == null)
{
    <p><em>Loading Blogs...</em></p>
}
else
{
    <FluentNumberField @bind-Value="_max" Label="Max Blogs" />
    <FluentButton OnClick="@FetchData">Refresh</FluentButton>

       @foreach (var a in blogs!)
       {                
           <FluentCard MinimalStyle="true" Height="200px">                    
               <FluentBadge Appearance="Appearance.Accent">
                   @a.Id
               </FluentBadge>

               <FluentBadge Appearance="Appearance.Lightweight">
                   @a.Name
               </FluentBadge>

               <FluentBadge Appearance="Appearance.Neutral">
                   @(a.Description ?? "this is a description")
               </FluentBadge>
               
               <FluentDivider />

            <img src="https://i.ytimg.com/vi/3H_-Mjq9OsA/maxresdefault.jpg"
                 height="100px" width="200px" />
               
           </FluentCard>                
           
           <FluentDivider />
       }
}

<p>This component demonstrates showing data.</p>

@code {
    IEnumerable<Frontend.IFetchBlogs_Blogs_Nodes> blogs = default!;
    int _max = 3;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        var first = _max;
        string? after = null;
        BlogSortInput[]? order = null;
        BlogFilterInput? filter = null;

        IOperationResult<IFetchBlogsResult> response = await Query.ExecuteAsync(
            first, after, filter, order, default);
        response.EnsureNoErrors();

        var results = response.Data!.Blogs!;
        var nodes = results.Nodes!;
                
        this.blogs = nodes;        
    }
}