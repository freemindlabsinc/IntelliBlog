@page "/blogs"
@rendermode InteractiveServer
@inject Frontend.BlogsMainQuery MainQuery

<PageTitle>My GQL Blogs</PageTitle>

<EditForm FormName="Bubba" Model="this" OnSubmit="FetchData">
    <FluentStack Style="margin-bottom: 20px;">
        <FluentCheckbox @bind-Value="Initialized" Label="Initialized" hidden />

        <FluentNumberField @bind-Value="First" Label="First" />
        <FluentTextArea @bind-Value="After" Label="After" />
        <FluentTextArea @bind-Value="SearchText" Label="Search Text" />
        <FluentNumberField @bind-Value="MaxLatestBlogPosts" Label="Max Posts Per Blog" />
        <FluentNumberField @bind-Value="MaxLatestPosts" Label="Max Latest" />        

        <FluentButton Type="ButtonType.Submit">Refresh</FluentButton>
    </FluentStack>
</EditForm>


Count: [(@Response?.Data?.Blogs?.Nodes?.Count ?? -1)]
Order: [@Order]
Filter: [@Where]


@if (this.Response == null)
{
    <p><em>Loading Blogs!!</em></p>
}
else
{
    @foreach (var blog in Response!.Data!.Blogs!.Nodes!)
    {
        <FluentCard Height="Auto" Style="margin-top: 10px;">
            <FluentLayout>
                    <FluentHeader>
                        <!-- Some Header Text -->
                        <FluentBadge Appearance="Appearance.Neutral">@blog.Name</FluentBadge>
                    
                        <FluentBadge Appearance="Appearance.Lightweight">@(blog.Description ?? "this is a description")</FluentBadge>
                        <FluentSpacer />

                        <!--  Aligned to the end -->
                        <FluentBadge Appearance="Appearance.Lightweight" Style="color: gray">@blog.Id</FluentBadge>

                    </FluentHeader>
                
                <!--FluentStack Orientation="Orientation.Horizontal" Width="100%" -->
                    <FluentNavMenu Width="250">
                       <img src="@blog.Image" alt="Broken Link" height="160px" width="240px" />

                       <!--FluentNavLink Icon="@(new Icons.Regular.Size24.Home())">Item 1</!--FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.Cloud())">Item 2</FluentNavLink>
                        <FluentNavGroup-- Title="Item 3">
                            <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafOne())">Item 3.1</FluentNavLink>
                            <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())">Item 3.2</FluentNavLink>
                        </FluentNavGroup-->
                        @* <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAgenda())" Disabled="false">Item 4</FluentNavLink> *@
                    </FluentNavMenu>

                        
                    <FluentFooter Style="@("height: 40px; color: white; text-align: center")">
                        <FluentLabel>
                            This blog has [X] article(s) and some other data: [Y], [Z]
                        </FluentLabel>                        
                    </FluentFooter>
                
            </FluentLayout>
        </FluentCard>
    }    
}



@code {
    [SupplyParameterFromForm]
    public bool Initialized { get; set; }

    [SupplyParameterFromForm]
    public int First { get; set; } = 2;

    [SupplyParameterFromForm]
    public string? After { get; set; }

    [SupplyParameterFromForm]
    public string? SearchText { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestBlogPosts { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestPosts { get; set; }

    public IOperationResult<IBlogsMainResult>? Response { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        // HACK This gets executed twice... https://www.thinktecture.com/en/blazor/blazor-components-lifecycle-is-not-always-straightforward/
        if (Response == null)
            await FetchData();               
    }


    static BlogSortInput byIdDesc = new BlogSortInput()
        {
            Id = SortEnumType.Desc
        };

    BlogSortInput[] Order => new[] { byIdDesc };

    BlogFilterInput? Where => GetFilterInput();

    BlogFilterInput? GetFilterInput()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
            return null;

        var filterInput = new BlogFilterInput();
        filterInput.Or = new BlogFilterInput[]
        {
            new BlogFilterInput() { Name = new StringOperationFilterInput() { Contains = SearchText } },
            new BlogFilterInput() { Description = new StringOperationFilterInput() { Contains = SearchText } },
        };

        return filterInput;
    }


    public async Task FetchData()
    {
        if (Response != null)
        { }

        Response = await MainQuery.ExecuteAsync(
            first: this.First,
            after: this.After,
            where: this.Where,
            order: this.Order,
            maxLatestBlogPosts: this.MaxLatestBlogPosts,
            maxLatestPosts: this.MaxLatestPosts,
            cancellationToken: default
        );

        Response.EnsureNoErrors();

        // var results = result.Data!.Blogs!;
        // var nodes = results.Nodes!;

        // this.blogs = nodes;
    }
}