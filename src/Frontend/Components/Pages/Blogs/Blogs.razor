@page "/blogs"
@rendermode InteractiveServer
@inject Frontend.BlogsMainQuery Query

<PageTitle>My Blogs</PageTitle>

@if (blogs == null)
{
    <p><em>Loading Blogs...</em></p>
}
else
{
    <FluentStack Style="margin-bottom: 20px;">        
        <FluentNumberField @bind-Value="First" Label="First" />
        <FluentTextArea @bind-Value="After" Label="After" />
        <FluentTextArea @bind-Value="SearchText" Label="Search Text" />
        <FluentNumberField @bind-Value="MaxLatestBlogPosts" Label="Max Posts Per Blog" />
        <FluentNumberField @bind-Value="MaxLatestPosts" Label="Max Latest" />

        <FluentButton OnClick="@FetchData" >Refresh</FluentButton>
    </FluentStack>
 
    @foreach (var blog in blogs!)
    {
        <FluentCard Height="Auto" Style="margin-top: 10px;">
            <FluentLayout>
                    <FluentHeader>
                        <!-- Some Header Text -->
                        <FluentBadge Appearance="Appearance.Neutral">@blog.Name</FluentBadge>
                    
                        <FluentBadge Appearance="Appearance.Lightweight">@(blog.Description ?? "this is a description")</FluentBadge>
                        <FluentSpacer />

                        <!--  Aligned to the end -->
                        <FluentBadge Appearance="Appearance.Lightweight" Style="color: gray">@blog.Id</FluentBadge>

                    </FluentHeader>
                
                <!--FluentStack Orientation="Orientation.Horizontal" Width="100%" -->
                    <FluentNavMenu Width="250">
                       <img src="@blog.Image" alt="Broken Link" height="160px" width="240px" />

                       <!--FluentNavLink Icon="@(new Icons.Regular.Size24.Home())">Item 1</!--FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.Cloud())">Item 2</FluentNavLink>
                        <FluentNavGroup-- Title="Item 3">
                            <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafOne())">Item 3.1</FluentNavLink>
                            <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())">Item 3.2</FluentNavLink>
                        </FluentNavGroup-->
                        @* <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAgenda())" Disabled="false">Item 4</FluentNavLink> *@
                    </FluentNavMenu>

                        
                    <FluentFooter Style="@("height: 40px; color: white; text-align: center")">
                        <FluentLabel>
                            This blog has [X] article(s) and some other data: [Y], [Z]
                        </FluentLabel>                        
                    </FluentFooter>
                
            </FluentLayout>
        </FluentCard>
    }    
}


@code {
    int First = 2;
    string? After { get; set; }
    string? SearchText { get; set; }
    int MaxLatestBlogPosts { get; set; }
    int MaxLatestPosts{ get; set; }


    //string manual_url = "https://i.ytimg.com/vi/3H_-Mjq9OsA/maxresdefault.jpg";
    bool ShowHeader = true;
    bool ShowNavMenu = true;
    bool ShowBodyContent = true;
    bool ShowFooter = true;

    IEnumerable<Frontend.IBlogsMain_Blogs_Nodes> blogs = default!;    

    protected override async Task OnInitializedAsync()
    {
        if (blogs == null)
        {
            await FetchData();
        }
    }

    static BlogSortInput byIdDesc = new BlogSortInput()
    {
        Id = SortEnumType.Desc
    };

    public async Task FetchData()
    {
        BlogSortInput[]? thisOrder = new[] { byIdDesc };

        BlogFilterInput? filterInput = null;
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            filterInput = new BlogFilterInput();
            filterInput.Or = new BlogFilterInput[] 
            { 
                new BlogFilterInput() { Name = new StringOperationFilterInput() { Contains = SearchText } },
                new BlogFilterInput() { Description = new StringOperationFilterInput() { Contains = SearchText } },
            };
        }

        IOperationResult<IBlogsMainResult> response = await Query.ExecuteAsync(
            first: First, 
            after: After, 
            where: filterInput,
            order: thisOrder,
            maxLatestBlogPosts: MaxLatestBlogPosts,
            maxLatestPosts: MaxLatestPosts, 
            cancellationToken: default
        );
        response.EnsureNoErrors();

        var results = response.Data!.Blogs!;
        var nodes = results.Nodes!;
                
        this.blogs = nodes;        
    }
}