@page "/blogs"
@rendermode InteractiveServer
@inject BlogsMainQuery MainQuery

<PageTitle>BlogsXX</PageTitle>

<FluentLayout>
    <FluentHeader>
        <div>
            <BlogSearch2 ResultsChanged2="OnNewResults" />
        </div>        
    </FluentHeader>

    <div>
        Count: [(@Response?.Blogs?.Nodes?.Count ?? -1)]
        Order: [Order]
        Filter: [Where]
    </div>
    @if (this.Response == null)
    {
        <p><em>Loading Blogs!!</em></p>
    }
    else
    {
        <div style="overflow:auto;" tabindex="-1">
        @foreach (var blog in this.Blogs_)
        {
            <BlogCard Blog="@blog" />            
        }
    
        @foreach (var post in this.LatestOverallPosts)
        {
            <PostCard Post="@post" />
        })
            
        </div>        
    }    

</FluentLayout>


@code {
    public IBlogsMainResult? Response { get; set; }

    public IQueryable<IBlogsMain_Blogs_Nodes> Blogs_ 
        => Response?.Blogs?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsMain_Blogs_Nodes>().AsQueryable();

    public IQueryable<IBlogsMain_LatestOverallPosts_Nodes> LatestOverallPosts 
        => Response?.LatestOverallPosts?.Nodes?.AsQueryable() ?? Array.Empty<IBlogsMain_LatestOverallPosts_Nodes>().AsQueryable();

    GridSort<IBlogsMain_Blogs_Nodes> sortByName = GridSort<IBlogsMain_Blogs_Nodes>
       .ByAscending(blog => blog.Name);

    public Task OnNewResults(IBlogsMainResult response)
    {
        Response = response;
        
        StateHasChanged();

        return Task.CompletedTask;
    }
}