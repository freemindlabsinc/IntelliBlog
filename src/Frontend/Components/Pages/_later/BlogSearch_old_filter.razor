@inject Frontend.BlogsMainQuery MainQuery

<EditForm FormName="PagedSearch" Model="this" OnSubmit="FetchData">
     <FluentStack Wrap="false"
                  Style="border: 1px dotted var(--accent-fill-rest)"
                  HorizontalAlignment="HorizontalAlignment.Center"
                  VerticalAlignment="VerticalAlignment.Top"  >    
            <FluentStack Orientation="Orientation.Horizontal">        
                <FluentNumberField @bind-Value="First" Label="First"  />
                <FluentTextField @bind-Value="After" Label="After" />
                <FluentTextField @bind-Value="SearchText" Label="Search Text" />
                <FluentNumberField @bind-Value="MaxLatestBlogPosts" Label="Max Posts Per Blog" />
                <FluentNumberField @bind-Value="MaxLatestPosts" Label="Max Latest" />
    
                <FluentButton Type="ButtonType.Submit">Refresh</FluentButton>
            </FluentStack>
    </FluentStack>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public int First { get; set; } = 2;

    [SupplyParameterFromForm]
    public string? After { get; set; }

    [SupplyParameterFromForm]
    public string? SearchText { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestBlogPosts { get; set; }

    [SupplyParameterFromForm]
    public int MaxLatestPosts { get; set; }

    [Parameter]
    public Func<IBlogsMainResult, Task>? ResultsChanged { get; set; }

    bool fetchedOnce = false;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!fetchedOnce)
        {
            await FetchData();
            fetchedOnce = true;
        }        
    }

    public async Task FetchData()
    {
        IOperationResult<IBlogsMainResult>? response = await MainQuery.ExecuteAsync(
            first: this.First,
            after: this.After,
            where: this.Where,
            order: this.Order,
            maxLatestBlogPosts: this.MaxLatestBlogPosts,
            maxLatestPosts: this.MaxLatestPosts,
            cancellationToken: default
        );

        response.EnsureNoErrors();

        if (ResultsChanged != null)
        {
            await ResultsChanged!.Invoke(response!.Data!);
        }
    }
    
    // ----------------------------

    static BlogSortInput byIdDesc = new BlogSortInput()
        {
            Id = SortEnumType.Desc
        };

    BlogSortInput[] Order => new[] { byIdDesc };

    BlogFilterInput? Where => GetFilterInput();

    BlogFilterInput? GetFilterInput()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
            return null;

        var filterInput = new BlogFilterInput();
        filterInput.Or = new BlogFilterInput[]
        {
            new BlogFilterInput() { Name = new StringOperationFilterInput() { Contains = SearchText } },
            new BlogFilterInput() { Description = new StringOperationFilterInput() { Contains = SearchText } },
        };

        return filterInput;
    }

    
}
