@page "/articles"
@rendermode InteractiveServer
@inject GraphQLServer.GetDataQuery Query

<PageTitle>My Articles</PageTitle>

@if (articles == null)
{
    <p><em>Loading Articles...</em></p>
}
else
{
    <FluentNumberField @bind-Value="_maxArticles" Label="Max Articles" />
    <FluentButton OnClick="@FetchData">Refresh</FluentButton>

       @foreach (var a in articles!)
       {                
           <FluentCard MinimalStyle="true" Height="200px">                    
               <FluentBadge Appearance="Appearance.Accent">
                   @a.Id
               </FluentBadge>

               <FluentBadge Appearance="Appearance.Lightweight">
                   @a.Title
               </FluentBadge>

               <FluentBadge Appearance="Appearance.Neutral">
                   @(a.Description ?? "this is a description")
               </FluentBadge>
               
               <FluentDivider />

               <img src="https://www.worksheetsplanet.com/wp-content/uploads/2023/03/What-is-an-article.jpg" 
                    height="100px" width="200px" />
               
           </FluentCard>                
           
           <FluentDivider />
       }
}

<p>This component demonstrates showing data.</p>

@code {
    IEnumerable<GraphQLServer.IGetData_Articles_Nodes> articles = default!;
    int _maxArticles = 30;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        var res = await Query.ExecuteAsync(_maxArticles);

        this.articles = res!.Data!.Articles!.Nodes!;    
    }
}