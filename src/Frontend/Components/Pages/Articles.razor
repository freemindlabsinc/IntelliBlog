@page "/articles"
@using IntelliBlogAPI
@rendermode InteractiveServer
@inject IntelliBlogAPI.Client Client
@inject TestGQL.GraphQL.GetDataQuery Query

<PageTitle>Articles</PageTitle>

@if (articles == null)
{
    <p><em>Loading Articles...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="articlegrid" Items="@articles" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="TestGQL.GraphQL.IGetData_Articles_Nodes">
        <PropertyColumn Title="Id" Property="@(c => c!.Id)" Align="Align.Start"/>
        <PropertyColumn Title="Title" Property="@(c => c!.Title)" Align="Align.Center" Sortable="true"/>
        <PropertyColumn Title="Description" Property="@(c => c!.Description)" Align="Align.Center" Sortable="true" />
        <!--PropertyColumn Title="Tags" Property="@(c => FormatTags(c!.Tags))" Align="Align.End"/-->

        <!--TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Like(context))">Like</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Unlike(context))">Unlike</FluentButton>
        </TemplateColumn-->
    </FluentDataGrid>
}

<p>This component demonstrates showing data.</p>

@code {
    IQueryable<TestGQL.GraphQL.IGetData_Articles_Nodes> articles = default!;

    protected override async Task OnInitializedAsync()
    {
        var res = await Query.ExecuteAsync(4);
        
        this.articles = res!.Data!.Articles!.Nodes!.AsQueryable();

    }
}