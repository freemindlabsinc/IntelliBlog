@page "/posts"
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<FluentLayout>
    <FluentHeader>     
        <!-- TODO: PostSearch control goes here -->
        <FluentStack>            
            <FluentNumberField Style="width: 70px" 
                               Label="Max"
                               Min="1"
                               Max="50"
                               @bind-Value="MaxPosts" 
                               @bind-Value:after="@SearchOptionChanged" />

            <FluentCombobox Label="Sort By"
                            @bind-SelectedOption="SortByItem"
                            @bind-SelectedOption:after="@SearchOptionChanged"
                            Items=@SortOptions
                            TOption="Option<PostSortInput>"
                            OptionText="@(i => i.Text)"
                            OptionValue="@(i => i.Value?.Id.ToString())" />

            <FluentButton @onclick="@(() => QueryData(PagingDirection.Previous))" Disabled="@(!HasPriorPage)">Prior Page</FluentButton>
            <FluentButton @onclick="@(() => QueryData(PagingDirection.Next))" Disabled="@(!HasNextPage)">Next Page</FluentButton>

            <FluentBadge Appearance="Appearance.Neutral">@PageNumber/@TotalPages</FluentBadge>                        
            
        </FluentStack>            
    </FluentHeader>

    <div style="display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress Min="0" Max="@TotalPages" Value="@PageNumber" BackgroundColor="DarkGray" Color="Gray"></FluentProgress>
    </div>

    <!-- Posts flex grid -->
    <FluentGrid Justify="JustifyContent.FlexStart" 
                AdaptiveRendering="true" 
                xStyle="overflow: auto; width:100%" 
                Spacing="1">
        @if (Model is null)
        {
            <div>Loading...</div>
        }
        else
        {
            <!-- Post cards -->
            @foreach (var post in Model!.Posts!.Nodes!)
            {
                <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                    <PostCard Post="post" />                    
                </FluentGridItem>
            }
        }
    </FluentGrid> 

        <div style="display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress Min="0" Max="@TotalPages" Value="@PageNumber" BackgroundColor="DarkGray" Color="Gray"></FluentProgress>
        </div>
    
</FluentLayout>
   

@code {

    [Inject]
    public BloggingClient Client { get; private set; } = default!;

    IPostsQueryResult? Model { get; set; }

    // Filters, sorting, etc.
    int MaxPosts = 2;
    Option<PostSortInput>? SortByItem = SortOptions[1];

    int PageNumber = 0;
    int? TotalPages => Model?.Posts?.TotalCount / MaxPosts;

    bool HasNextPage => Model?.Posts?.PageInfo?.HasNextPage == true;
    bool HasPriorPage => Model?.Posts?.PageInfo?.HasPreviousPage == true;

    protected override async Task OnInitializedAsync()
    {
        Reset();
        await QueryData(PagingDirection.Next);
    }

    void Reset()
    {
        Model = null;
        PageNumber = 0;
    }

    public async Task SearchOptionChanged()
    {
        Reset();
        await QueryData(PagingDirection.Next);
    }

    enum PagingDirection
    {
        Previous,
        Next
    }

    async Task QueryData(PagingDirection? pagingDirection)
    {
        var pageInfo = this.Model?.Posts?.PageInfo;

        var nextPage = pagingDirection == PagingDirection.Next;

        var response = await Client.PostsQuery.ExecuteAsync(
                first: nextPage ? this.MaxPosts : null,
                after: nextPage ? pageInfo?.EndCursor : null,
                last: nextPage ? null : this.MaxPosts,
                before: nextPage ? null : pageInfo?.StartCursor,
                order: new PostSortInput[] { SortByItem?.Value ?? SortById });

        response.EnsureNoErrors();
        
        if (nextPage)
        {
            PageNumber++;
        }
        else
        {
            PageNumber--;
        }

        Model = response.Data!;
        
        StateHasChanged();
    }

    static PostSortInput SortById = new PostSortInput { Id = SortEnumType.Asc };    
    static PostSortInput SortByIdDesc = new PostSortInput { Id = SortEnumType.Desc };
    static PostSortInput SortByTitle = new PostSortInput { Title = SortEnumType.Asc };
    static PostSortInput SortByTitleDesc = new PostSortInput { Title = SortEnumType.Desc };

    static List<Option<PostSortInput>> SortOptions = new()
        {
            { new Option<PostSortInput> { Value = SortById, Text = "Id" } },
            { new Option<PostSortInput> { Value = SortByIdDesc, Text = "Id Desc" } },
            { new Option<PostSortInput> { Value = SortByTitle, Text = "Title" } },
            { new Option<PostSortInput> { Value = SortByTitleDesc, Text = "Title Desc" } }
        };

}