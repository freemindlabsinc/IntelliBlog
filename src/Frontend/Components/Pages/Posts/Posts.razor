@page "/posts"
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>


<FluentLayout>
    <FluentHeader>     
        <!-- TODO: PostSearch control goes here -->
        <FluentStack>
            
            <FluentNumberField Label="Max" 
                               @bind-Value="MaxPosts" 
                               @bind-Value:after="@PageSizeChanged" />

            <FluentCombobox Label="Sort By"
                            @bind-Value="@SortBy"
                            Items=@SortOptions
                            TOption="Option<PostSortInput>"
                            OptionText="@(i => i.Text)"
                            OptionValue="@(i => i.Value?.Id.ToString())"                                                        
                            SelectedOptionChanged="@OrderByChanged" />

            <FluentButton @onclick="@(() => PriorPage())" Disabled="@(!HasPriorPage)">Prior Page</FluentButton>
            <FluentButton @onclick="@(() => NextPage())" Disabled="@(!HasNextPage)">Next Page</FluentButton>

            <FluentBadge Appearance="Appearance.Neutral">@PageNumber/@TotalPages</FluentBadge>
        </FluentStack>               
    </FluentHeader>

    <!-- Posts flex grid -->
    <FluentGrid Justify="JustifyContent.FlexStart" AdaptiveRendering="true" Style="overflow: auto; width:100%" Spacing="0">
        @if (Model is null)
        {
            <div>Loading...</div>
        }
        else
        {
            <!-- Post cards -->
            @foreach (var post in Model!.Posts!.Nodes!)
            {
                <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                    <PostCard Post="post" />                    
                </FluentGridItem>
            }
        }
    </FluentGrid> 
    

</FluentLayout>
   

@code {

    [Inject]
    public BloggingClient Client { get; private set; } = default!;

    IPostsQueryResult? Model { get; set; } = default!;

    // Filters, sorting, etc.
    int MaxPosts = 2;
    string? SortBy = "Id Desc";    

    protected override async Task OnInitializedAsync()
    {
        await NextPage();
    }

    public async Task PageSizeChanged()
    {
        Model = null;
        PageNumber = -1;
        await NextPage();
    }

    async Task OrderByChanged(Option<PostSortInput> option)
    {
        SortBy = option.Text;
        
        await PageSizeChanged();
    }

    public Task NextPage() => QueryData(nextPage: true);

    public Task PriorPage() => QueryData(nextPage: false);

    PostSortInput[] GetOrder()
    {
        Option<PostSortInput>? selectedSortOption = SortOptions.FirstOrDefault(x => x.Text == this.SortBy);
        var order_value = new PostSortInput[] { selectedSortOption?.Value ?? SortById };
        return order_value;
    }

    int PageNumber = -1;
    int? TotalPages => Model?.Posts?.TotalCount / MaxPosts;

    bool HasNextPage => Model?.Posts?.PageInfo?.HasNextPage == true;        
    bool HasPriorPage => Model?.Posts?.PageInfo?.HasPreviousPage ?? true;

    async Task QueryData(bool nextPage)
    {
        var pageInfo = this.Model?.Posts?.PageInfo;

        var response = await Client.PostsQuery.ExecuteAsync(
                first: nextPage ? this.MaxPosts : null,
                after: nextPage ? pageInfo?.EndCursor : null,
                last: nextPage ? null : this.MaxPosts,
                before: nextPage ? null : pageInfo?.StartCursor,
                order: GetOrder());

        response.EnsureNoErrors();
        if (nextPage)
        {
            PageNumber++;
        }
        else
        {
            PageNumber--;
        }

        Model = response.Data!;
        
        StateHasChanged();
    }

    static PostSortInput SortById = new PostSortInput { Id = SortEnumType.Asc };    
    static PostSortInput SortByIdDesc = new PostSortInput { Id = SortEnumType.Desc };
    static PostSortInput SortByTitle = new PostSortInput { Title = SortEnumType.Asc };
    static PostSortInput SortByTitleDesc = new PostSortInput { Title = SortEnumType.Desc };

    static List<Option<PostSortInput>> SortOptions = new()
        {
            { new Option<PostSortInput> { Value = SortById, Text = "Id" } },
            { new Option<PostSortInput> { Value = SortByIdDesc, Text = "Id Desc" } },
            { new Option<PostSortInput> { Value = SortByTitle, Text = "Title" } },
            { new Option<PostSortInput> { Value = SortByTitleDesc, Text = "Title Desc" } }
        };

}