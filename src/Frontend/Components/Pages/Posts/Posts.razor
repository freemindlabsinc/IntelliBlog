@page "/posts"
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>


<FluentLayout>
    <FluentHeader>     
        <!-- TODO: PostSearch control goes here -->
        <FluentStack>
            <FluentNumberField @bind-Value="_maxArticles" @bind-Value:after="FetchData" Label="Max" />
            <!--FluentButton OnClick="@FetchData">Refresh</!--FluentButton-->
        </FluentStack>        
    </FluentHeader>

    <!-- Posts flex grid -->
    <FluentGrid Justify="JustifyContent.FlexStart" 
                AdaptiveRendering="true"                
                Style="overflow: auto; width:100%"
                Spacing="0">

        <!-- Post cards -->
        @foreach (var post in Items!)
        {
           <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                <PostCard Post="post" />
           </FluentGridItem>
        }
    </FluentGrid>
    
</FluentLayout>
   

@code {
    [Inject]
    public PostsMainQuery Query { get; set; } = default!;

    IEnumerable<Frontend.IPostsMain_Posts_Nodes> Items 
        => Data?.Posts?.Nodes ?? Array.Empty<Frontend.IPostsMain_Posts_Nodes>();

    IPostsMainResult? Data;

    int _maxArticles = 30;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        var response = await Query.ExecuteAsync(_maxArticles);
        response.EnsureNoErrors();

        Data = response.Data;
        
        StateHasChanged();
    }
}