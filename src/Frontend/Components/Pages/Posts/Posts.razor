@page "/posts"
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>


<FluentLayout>
    <FluentHeader>     
        <!-- TODO: PostSearch control goes here -->
        <FluentStack>
            <FluentNumberField Label="Max" @bind-Value="MaxArticles" @bind-Value:after="FetchData" />
            <FluentCombobox Label="Sort By"
                            Items=@SortOptions
                            TOption="Option<PostSortInput>"
                            OptionText="@(i => i.Text)"
                            OptionValue="@(i => i.Value?.Id.ToString())"                            
                            @bind-Value="@SortBy"
                            SelectedOptionChanged="@SelectedSortChanged"
                            />
            <FluentButton OnClick="@FetchData">Next Page</FluentButton>
            <FluentBadge Appearance="Appearance.Neutral">@After</FluentBadge>
        </FluentStack>               
    </FluentHeader>

    <!-- Posts flex grid -->
    <FluentGrid Justify="JustifyContent.FlexStart" AdaptiveRendering="true" Style="overflow: auto; width:100%" Spacing="0">
        @if (Model is null)
        {
            <div>Loading...</div>
        }
        else
        {
            <!-- Post cards -->
            @foreach (var post in Model!.Posts!.Nodes!)
            {
                <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                    <PostCard Post="post" />                    
                </FluentGridItem>
            }
        }
    </FluentGrid>
    
</FluentLayout>
   

@code {
    [Inject]
    public BloggingClient Client { get; set; } = default!;
    IPostsModelResult Model { get; set; } = default!;

    // Filters, sorting, etc.
    int MaxArticles = 2;
    string? After = null;
    string? SortBy = "Id Desc";
    //Option<PostSortInput> SelectedSortOption = default!;

    async Task SelectedSortChanged(Option<PostSortInput> option)
    {
        SortBy = option.Text;
        After = null;

        await FetchData();
    }

    // Methods
    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        Option<PostSortInput>? selectedSortOption = SortOptions.FirstOrDefault(x => x.Text == this.SortBy);

        var response = await Client.PostsModel.ExecuteAsync(
            maxRows: this.MaxArticles,
            order: new PostSortInput[] { selectedSortOption?.Value ?? SortById },
            after: this.After);

        response.EnsureNoErrors();

        Model = response.Data!;
        
        After = Model.Posts!.PageInfo.EndCursor;

        StateHasChanged();
    }

    static PostSortInput SortById = new PostSortInput { Id = SortEnumType.Asc };    
    static PostSortInput SortByIdDesc = new PostSortInput { Id = SortEnumType.Desc };
    static PostSortInput SortByTitle = new PostSortInput { Title = SortEnumType.Asc };
    static PostSortInput SortByTitleDesc = new PostSortInput { Title = SortEnumType.Desc };

    static List<Option<PostSortInput>> SortOptions = new()
        {
            { new Option<PostSortInput> { Value = SortById, Text = "Id" } },
            { new Option<PostSortInput> { Value = SortByIdDesc, Text = "Id Desc" } },
            { new Option<PostSortInput> { Value = SortByTitle, Text = "Title" } },
            { new Option<PostSortInput> { Value = SortByTitleDesc, Text = "Title Desc" } }
        };
    
}