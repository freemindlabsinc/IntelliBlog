@page "/posts"
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>


<FluentLayout>
    <FluentHeader>     
        <!-- TODO: PostSearch control goes here -->
        <FluentStack>
            <FluentNumberField @bind-Value="MaxArticles" @bind-Value:after="FetchData" Label="Max" />
            <!--FluentButton OnClick="@FetchData">Refresh</!--FluentButton-->
        </FluentStack>        
    </FluentHeader>

    <!-- Posts flex grid -->
    <FluentGrid Justify="JustifyContent.FlexStart" 
                AdaptiveRendering="true"                
                Style="overflow: auto; width:100%"
                Spacing="0">
        @if (Model is null)
        {
            <div>Loading...</div>
        }
        else
        {
            <!-- Post cards -->
            @foreach (var post in Model!.Posts!.Nodes!)
            {
                <FluentGridItem xs="12" md="12" lg="6" xl="4" xxl="3">
                    <PostCard Post="post" />
                </FluentGridItem>
            }
        }
    </FluentGrid>
    
</FluentLayout>
   

@code {
    [Inject]
    public BloggingClient Client { get; set; } = default!;
    
    IPostsModelResult Model { get; set; } = default!;
    
    int MaxArticles = 30;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        var response = await Client.PostsModel.ExecuteAsync(
            maxRows: MaxArticles);
        response.EnsureNoErrors();

        Model = response.Data!;
        
        StateHasChanged();
    }
}