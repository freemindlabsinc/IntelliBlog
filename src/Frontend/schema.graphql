schema {
  query: Query
  mutation: Mutation
}

type Blog {
  name: String!
  description: String
  notes: String
  image: String
  isOnline: Boolean!
  tags: [String!]!
  createdOn: DateTime!
  createdBy: String
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: Int!
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostFilterInput order: [PostSortInput!]): PostsConnection
  sources("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SourceFilterInput order: [SourceSortInput!]): SourcesConnection
}

type Post {
  title: String!
  description: String
  text: String
  isPublished: Boolean!
  state: PostState!
  image: String
  tags: [String!]!
  sources("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SourceFilterInput order: [SourceSortInput!]): SourcesConnection
  likes: [PostLike!]!
  createdOn: DateTime!
  createdBy: String
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: Int!
  blog: Blog
}

type Source {
  name: String!
  type: SourceType!
  description: String
  url: String
  image: String
  likes: [SourceLike!]!
  tags: [String!]!
  createdOn: DateTime!
  createdBy: String
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: Int!
  blog: Blog
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostFilterInput order: [PostSortInput!]): PostsConnection
}

type Query {
  blogs("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BlogFilterInput order: [BlogSortInput!]): BlogsConnection
  blogById(id: ID): Blog
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostFilterInput order: [PostSortInput!]): PostsConnection
  postById(id: ID): Post
  sources("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SourceFilterInput order: [SourceSortInput!]): SourcesConnection
  sourceById(id: ID): Source
}

type Mutation {
  createBlog(name: String! description: String image: String notes: String): ResultOfInt32!
  updateBlog(id: Int! name: String! description: String notes: String): Result!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

enum PostState {
  DRAFT
  COMPLETE
}

type PostSource {
  postId: Int!
  sourceId: Int!
  linkedOn: DateTime!
  id: Int!
}

type PostLike {
  postId: Int!
  likedBy: String!
  likedOn: DateTime!
  id: Int!
}

enum SourceType {
  UNSPECIFIED
  VIDEO
  WEBSITE
}

type SourceLike {
  sourceId: Int!
  likedBy: String!
  likedOn: DateTime!
  id: Int!
}

input BlogFilterInput {
  and: [BlogFilterInput!]
  or: [BlogFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  notes: StringOperationFilterInput
  image: StringOperationFilterInput
  isOnline: BooleanOperationFilterInput
  tags: ListStringOperationFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input BlogSortInput {
  name: SortEnumType
  description: SortEnumType
  notes: SortEnumType
  image: SortEnumType
  isOnline: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type BlogsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BlogsEdge!]
  "A flattened list of the nodes."
  nodes: [Blog!]
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  blogId: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  text: StringOperationFilterInput
  isPublished: BooleanOperationFilterInput
  state: PostStateOperationFilterInput
  image: StringOperationFilterInput
  tags: ListStringOperationFilterInput
  sources: ListFilterInputTypeOfPostSourceFilterInput
  likes: ListFilterInputTypeOfPostLikeFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input PostSortInput {
  blogId: SortEnumType
  title: SortEnumType
  description: SortEnumType
  text: SortEnumType
  isPublished: SortEnumType
  state: SortEnumType
  image: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type PostsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PostsEdge!]
  "A flattened list of the nodes."
  nodes: [Post!]
}

input SourceFilterInput {
  and: [SourceFilterInput!]
  or: [SourceFilterInput!]
  blogId: IntOperationFilterInput
  name: StringOperationFilterInput
  type: SourceTypeOperationFilterInput
  description: StringOperationFilterInput
  url: StringOperationFilterInput
  image: StringOperationFilterInput
  likes: ListFilterInputTypeOfSourceLikeFilterInput
  tags: ListStringOperationFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input SourceSortInput {
  blogId: SortEnumType
  name: SortEnumType
  type: SortEnumType
  description: SortEnumType
  url: SortEnumType
  image: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type SourcesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SourcesEdge!]
  "A flattened list of the nodes."
  nodes: [Source!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type BlogsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Blog!
}

input PostStateOperationFilterInput {
  eq: PostState
  neq: PostState
  in: [PostState!]
  nin: [PostState!]
}

input ListFilterInputTypeOfPostSourceFilterInput {
  all: PostSourceFilterInput
  none: PostSourceFilterInput
  some: PostSourceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPostLikeFilterInput {
  all: PostLikeFilterInput
  none: PostLikeFilterInput
  some: PostLikeFilterInput
  any: Boolean
}

"An edge in a connection."
type PostsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Post!
}

input SourceTypeOperationFilterInput {
  eq: SourceType
  neq: SourceType
  in: [SourceType!]
  nin: [SourceType!]
}

input ListFilterInputTypeOfSourceLikeFilterInput {
  all: SourceLikeFilterInput
  none: SourceLikeFilterInput
  some: SourceLikeFilterInput
  any: Boolean
}

"An edge in a connection."
type SourcesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Source!
}

input PostSourceFilterInput {
  and: [PostSourceFilterInput!]
  or: [PostSourceFilterInput!]
  postId: IntOperationFilterInput
  sourceId: IntOperationFilterInput
  linkedOn: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input PostLikeFilterInput {
  and: [PostLikeFilterInput!]
  or: [PostLikeFilterInput!]
  postId: IntOperationFilterInput
  likedBy: StringOperationFilterInput
  likedOn: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

input SourceLikeFilterInput {
  and: [SourceLikeFilterInput!]
  or: [SourceLikeFilterInput!]
  sourceId: IntOperationFilterInput
  likedBy: StringOperationFilterInput
  likedOn: DateTimeOperationFilterInput
  id: IntOperationFilterInput
}

type Result {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ResultOfInt32 {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInt32
  value: Int!
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

type PagedResultOfInt32 {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfInt32
  pagedInfo: PagedInfo
  value: Int!
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ValidationError {
  identifier: String
  errorMessage: String
  errorCode: String
  severity: ValidationSeverity!
}

enum ResultStatus {
  OK
  CREATED
  ERROR
  FORBIDDEN
  UNAUTHORIZED
  INVALID
  NOT_FOUND
  NO_CONTENT
  CONFLICT
  CRITICAL_ERROR
  UNAVAILABLE
}

input PagedInfoInput {
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}

type PagedResultOfResult {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  pagedInfo: PagedInfo
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

enum ValidationSeverity {
  ERROR
  WARNING
  INFO
}

type PagedInfo {
  setPageNumber(pageNumber: Long!): PagedInfo
  setPageSize(pageSize: Long!): PagedInfo
  setTotalPages(totalPages: Long!): PagedInfo
  setTotalRecords(totalRecords: Long!): PagedInfo
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}