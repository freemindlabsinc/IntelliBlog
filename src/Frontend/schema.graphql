schema {
  query: Query
  mutation: Mutation
}

type Query {
  articles("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ArticleFilterInput order: [ArticleSortInput!]): ArticlesConnection
  articleById(id: ID): Article
  blogs("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BlogFilterInput order: [BlogSortInput!]): BlogsConnection
  blogById(id: ID): Blog
  sources("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SourceFilterInput order: [SourceSortInput!]): SourcesConnection
  sourceById(id: ID): Source
}

type Mutation {
  createBlog(name: String! description: String): Int!
  updateBlog(id: Int! name: String! description: String): Result!
}

input ArticleFilterInput {
  and: [ArticleFilterInput!]
  or: [ArticleFilterInput!]
  blogId: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  text: StringOperationFilterInput
  isPublished: BooleanOperationFilterInput
  state: ArticleStateOperationFilterInput
  tags: ListFilterInputTypeOfArticleTagFilterInput
  sources: ListFilterInputTypeOfArticleSourceFilterInput
  comments: ListFilterInputTypeOfArticleCommentFilterInput
  likes: ListFilterInputTypeOfArticleLikeFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input ArticleSortInput {
  blogId: SortEnumType
  title: SortEnumType
  description: SortEnumType
  text: SortEnumType
  isPublished: SortEnumType
  state: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type ArticlesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ArticlesEdge!]
  "A flattened list of the nodes."
  nodes: [Article!]
}

input BlogFilterInput {
  and: [BlogFilterInput!]
  or: [BlogFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  notes: StringOperationFilterInput
  image: StringOperationFilterInput
  smallImage: StringOperationFilterInput
  isPublished: BooleanOperationFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input BlogSortInput {
  name: SortEnumType
  description: SortEnumType
  notes: SortEnumType
  image: SortEnumType
  smallImage: SortEnumType
  isPublished: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type BlogsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BlogsEdge!]
  "A flattened list of the nodes."
  nodes: [Blog!]
}

input SourceFilterInput {
  and: [SourceFilterInput!]
  or: [SourceFilterInput!]
  blogId: IntOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  url: StringOperationFilterInput
  tags: ListFilterInputTypeOfSourceTagFilterInput
  createdOn: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedOn: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input SourceSortInput {
  blogId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  url: SortEnumType
  createdOn: SortEnumType
  createdBy: SortEnumType
  lastModifiedOn: SortEnumType
  lastModifiedBy: SortEnumType
  id: SortEnumType
}

"A connection to a list of items."
type SourcesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SourcesEdge!]
  "A flattened list of the nodes."
  nodes: [Source!]
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ArticleStateOperationFilterInput {
  eq: ArticleState
  neq: ArticleState
  in: [ArticleState!]
  nin: [ArticleState!]
}

input ListFilterInputTypeOfArticleTagFilterInput {
  all: ArticleTagFilterInput
  none: ArticleTagFilterInput
  some: ArticleTagFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticleSourceFilterInput {
  all: ArticleSourceFilterInput
  none: ArticleSourceFilterInput
  some: ArticleSourceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticleCommentFilterInput {
  all: ArticleCommentFilterInput
  none: ArticleCommentFilterInput
  some: ArticleCommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticleLikeFilterInput {
  all: ArticleLikeFilterInput
  none: ArticleLikeFilterInput
  some: ArticleLikeFilterInput
  any: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Article {
  title: String!
  description: String
  text: String
  isPublished: Boolean!
  state: ArticleState!
  tags: [ArticleTag!]!
  sources: [ArticleSource!]!
  comments: [ArticleComment!]!
  likes: [ArticleLike!]!
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: ID
}

"An edge in a connection."
type ArticlesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Article!
}

type Blog {
  name: String!
  description: String
  notes: String
  image: String
  smallImage: String
  isPublished: Boolean!
  createdOn: DateTime!
  createdBy: String
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: ID
}

"An edge in a connection."
type BlogsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Blog!
}

input ListFilterInputTypeOfSourceTagFilterInput {
  all: SourceTagFilterInput
  none: SourceTagFilterInput
  some: SourceTagFilterInput
  any: Boolean
}

type Source {
  blogId: Int!
  name: String!
  description: String
  url: String
  tags: [SourceTag!]!
  createdOn: DateTime!
  createdBy: String
  lastModifiedOn: DateTime
  lastModifiedBy: String
  id: ID
}

"An edge in a connection."
type SourcesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Source!
}

input ArticleTagFilterInput {
  and: [ArticleTagFilterInput!]
  or: [ArticleTagFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  id: IntOperationFilterInput
}

input ArticleSourceFilterInput {
  and: [ArticleSourceFilterInput!]
  or: [ArticleSourceFilterInput!]
  id: IntOperationFilterInput
  articleId: IntOperationFilterInput
  sourceId: IntOperationFilterInput
  linkedOn: DateTimeOperationFilterInput
  domainEvents: ListFilterInputTypeOfDomainEventBaseFilterInput
}

input ArticleCommentFilterInput {
  and: [ArticleCommentFilterInput!]
  or: [ArticleCommentFilterInput!]
  articleId: IntOperationFilterInput
  text: StringOperationFilterInput
  commentedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

input ArticleLikeFilterInput {
  and: [ArticleLikeFilterInput!]
  or: [ArticleLikeFilterInput!]
  articleId: IntOperationFilterInput
  likedBy: StringOperationFilterInput
  id: IntOperationFilterInput
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input SourceTagFilterInput {
  and: [SourceTagFilterInput!]
  or: [SourceTagFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  id: IntOperationFilterInput
}

input ListFilterInputTypeOfDomainEventBaseFilterInput {
  all: DomainEventBaseFilterInput
  none: DomainEventBaseFilterInput
  some: DomainEventBaseFilterInput
  any: Boolean
}

input DomainEventBaseFilterInput {
  and: [DomainEventBaseFilterInput!]
  or: [DomainEventBaseFilterInput!]
  dateOccurred: DateTimeOperationFilterInput
}

type ArticleSource {
  id: Int!
  articleId: Int!
  sourceId: Int!
  linkedOn: DateTime!
  domainEvents: [DomainEventBase!]!
}

enum ArticleState {
  DRAFT
  COMPLETE
}

type Result {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

type ArticleTag {
  name: String!
  description: String
  id: ID
}

type ArticleComment {
  text: String!
  commentedBy: String!
  id: ID
}

type ArticleLike {
  articleId: Int!
  likedBy: String!
  id: ID
}

type SourceTag {
  name: String!
  description: String
  id: ID
}

type ValidationError {
  identifier: String
  errorMessage: String
  errorCode: String
  severity: ValidationSeverity!
}

enum ResultStatus {
  OK
  CREATED
  ERROR
  FORBIDDEN
  UNAUTHORIZED
  INVALID
  NOT_FOUND
  NO_CONTENT
  CONFLICT
  CRITICAL_ERROR
  UNAVAILABLE
}

input PagedInfoInput {
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}

type PagedResultOfResult {
  toPagedResult(pagedInfo: PagedInfoInput): PagedResultOfResult
  pagedInfo: PagedInfo
  value: Result
  status: ResultStatus!
  isSuccess: Boolean!
  successMessage: String
  correlationId: String
  location: String
  errors: [String]
  validationErrors: [ValidationError]
}

type DomainEventBase {
  dateOccurred: DateTime!
}

type PagedInfo {
  setPageNumber(pageNumber: Long!): PagedInfo
  setPageSize(pageSize: Long!): PagedInfo
  setTotalPages(totalPages: Long!): PagedInfo
  setTotalRecords(totalRecords: Long!): PagedInfo
  pageNumber: Long!
  pageSize: Long!
  totalPages: Long!
  totalRecords: Long!
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

enum ValidationSeverity {
  ERROR
  WARNING
  INFO
}